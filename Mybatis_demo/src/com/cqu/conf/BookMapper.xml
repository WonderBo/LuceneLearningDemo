<?xml version="1.0" encoding="UTF-8" ?>


<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="/">
	<insert id="insertBook" parameterType="Book" statementType="PREPARED">
		insert into book(bookname, price, userID) values(#{bookName}, #{price}, #{user.id})
	</insert>
	
	<!-- resultMap用于关联查询，type：返回数据类型（完全限定名或别名） id：主键/属性映射  result：普通字段/属性映射 -->
	<!-- property：类属性		column：数据库表字段 -->
	<!-- 通过反射机制进行实例化(通过构造函数)与映射赋值(通过setter方法或者构造函数)操作 -->
	<!-- 联合查询：非关联属性利用setter方法直接映射赋值，关联属性利用getter方法获取该属性的具体信息再进行setter映射赋值操作 -->
	<resultMap id="bookUserMap" type="Book">
		<id property="id" column="id" />
		<result property="bookName" column="bookname" />
		<result property="price" column="price"/>
		<!-- association：复杂类型的关联	javaType：关联类(完全限定名或别名) -->
		<association property="user" column="userID" javaType="User">
			<!-- 通过setter方法进行属性/字段映射赋值 -->
			<id property="id" column="userID" />
			<result property="userName" column="username" />
			<result property="password" column="password" />
		</association>
	</resultMap>
	<select id="selectBookJoin" resultMap="bookUserMap">
		select * from book inner join user on user.id=book.userID
	</select>
	
	<!-- 构造查询：通过构造函数在实例化时进行映射赋值，但是需要有对应匹配的构造函数 -->
	<resultMap id="bookUserMapByCon" type="Book">
		<id property="id" column="id" />
		<result property="bookName" column="bookname" />
		<result property="price" column="price" />
		<association property="user" column="userID" javaType="User">
			<!-- 通过构造函数进行属性/字段映射赋值 -->
			<constructor>
				<arg column="username" javaType="String" />
				<arg column="password" javaType="String" />
			</constructor>
		</association>
	</resultMap>
	<select id="selectBookJoin2" resultMap="bookUserMapByCon">
		select * from book inner join user on user.id=book.userID
	</select>
	
	<!-- 子查询 -->
	<resultMap id="bookUserMapBySub" type="Book">
		<id property="id" column="id" />
		<result property="bookName" column="bookname" />
		<result property="price" column="price"/>
		<!-- select：子查询 -->
		<!-- column对应的值会传递给select对应的子查询，映射赋值返回javaType类型的实例，再赋值给property对应的属性 -->
		<association property="user" column="userID" javaType="User" select="findById" />
	</resultMap>
	<!-- 主查询 -->
	<select id="selectBookJoin3" resultMap="bookUserMapBySub">
		select * from book
	</select>
	
	<!-- 动态SQL作用：拼接SQL语句更加方便快捷 -->
	<!-- 动态SQL提供元素：if，choose(when, otherwise)，trim(where, set)，foreach。其中if，choose为选择元素，foreach为循环元素，
		 where与set为对应SQL关键字的元素，额外提供剔除无用符号的作用，trim为格式化元素，可以看作为where与set的泛化元素 -->
	<!-- 动态SQL：if标记	test：选择条件（条件中的参数属于对象属性，而不是数据库字段） -->
	<select id="selectIf" parameterType="Book" resultType="Book">
		<!-- 1=1的作用在于拼装SQL语句（特色习惯），避免and有时可存在有时可不存在 -->
		select * from book where 1=1 
			<if test="price!=null">
				and price>#{price}
			</if>
	</select>
	
	<!-- 动态SQL：choose标记(效果同if()..else if()..else)  when：选择分支   test：选择条件（前面条件匹配成功后面将不再进行条件匹配） -->
	<select id="selectChoose" parameterType="Book" resultType="Book">
		select * from book where 1=1
			<choose>
				<when test="id!=null">
					and id=#{id}
				</when>
				<when test="bookName!=null">
					and bookname like #{bookName}	<!-- "%" 可用于定义通配符（模式中缺少的字母） -->
				</when>
				<otherwise>
					and price is not null
				</otherwise>
			</choose>
	</select>
	
	<!-- 动态SQL：where标记(智能条件：如果包含的标签中有返回值的话，它就插入一个‘where’；
			如果标签返回的内容是以AND 或OR 开头的，则它会剔除掉逻辑运算符) -->
	<select id="selectWhere" parameterType="Book" resultType="Book">
		select * from book 
		<where>
			<if test="bookName!=null">
				bookname like #{bookName}
			</if>
			<if test="id!=null">
				and id=#{id}
			</if>
		</where>
	</select>
	
	<!-- 动态SQL：set标记(智能赋值：动态地配置SET 关键字，和剔除追加到条件末尾的任何不相关的逗号) -->
	<update id="updateSet" parameterType="Book">
		update book 
		<set>
			<if test="bookName!=null">
				bookname=#{bookName},
			</if>
			<if test="price!=null">
				price=#{price},
			</if>
		</set>
		where id=#{id}
	</update>
	
	<!-- 动态SQL：trim标记(格式化标记)	prefix：前缀增加	suffix：后缀增加	
			 prefixOverrides：自动判断(剔除)前缀	suffixOverrides：自动判断(剔除)后缀 -->
	<update id="updateTrim" parameterType="Book">
		update book
		<trim prefix="set" suffix="where id=#{id}" suffixOverrides=",">
			<if test="bookName!=null and bookName!=''">
				bookname=#{bookName},
			</if>
			<if test="price!=null and price!=''">
				price=#{price}
			</if>
		</trim>
	</update>
	
	<!-- 动态SQL：foreach标记(循环标记：用于循环查询) collection：循环集合或指定类型	item：每一次迭代结果	open：开始符号(可选)
				 separator：元素间分隔符(可选)	close：关闭符号(可选)	index：list与array中的序号(可选)  -->
	<select id="selectForeach" parameterType="java.util.List" resultType="Book">
		select * from book
		<where>
			id in 
			<foreach collection="list" item="item" index="index" open="(" separator="," close=")">
				#{item}
			</foreach>
		</where>
	</select>
	
	<!-- 动态SQL：foreach标记(循环标记：用于循环插入) foreach里取的属性在实体对象中必须存在 -->
	<insert id="insertForeach" parameterType="java.util.List">
		insert into book (bookname, price, userID) values
		<foreach collection="list" item="item" index="index" open="" separator="," close="">
			(#{item.bookName}, #{item.price}, #{item.user.id})
		</foreach>
	</insert>
</mapper>
