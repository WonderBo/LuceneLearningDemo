<?xml version="1.0" encoding="UTF-8" ?>


<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="/">
	<select id="findById" parameterType="int" resultType="com.cqu.bean.User">
		select * from user where id=#{id}
	</select>

	<!-- parameterType:传入（方法）参数类型（完全限定名或别名），
		 statementType:PREPARED，STATEMENT或CALLABLE，
		 keyProperty:主键属性，
		 useGeneratedKeys:主键自增 -->
	<!-- parameterType与resultType或者resultMap都是相对于sqlSession中具体增删查改方法的入参类型与结果封装类型（注意是结果类型，不是返回类型，如果返回
		 List类型，resultType为泛型类型），每个增删查改方法均有两种格式：function(String)与function(String,Object),其中select有更多具体功能的方法 -->
	<!-- sql语句根据数据库解析格式书写（一般不区分大小写），但是传入参数是根据java反射机制的getter方法取值，因此注意大小写 -->
	<insert id="insertUser" parameterType="User" statementType="PREPARED"
		keyProperty="id" useGeneratedKeys="true">
		insert into user(username, password) values(#{userName}, #{password})
	</insert>
	
	<!-- jdbcType：java数据类型与数据库数据类型需要mybatis进行转换（一般自动完成，不能时可以手动指定，注意数据类型需要大写，否则非法） -->
	<update id="updateUser" parameterType="User">
		update user set username=#{userName, jdbcType=VARCHAR}, password=#{password, jdbcType=VARCHAR} where id=#{id, jdbcType=INTEGER}
	</update>

	<!-- parameterType封装：hashmap，resultType：期望的返回类型（完全限定名或别名） -->
	<!-- 注意：resultType与resultMap不能同时使用 -->
	<select id="selectLogin" parameterType="hashmap" resultType="User">
		select * from user where username=#{userName} and password=#{password}
	</select>
	
	<!-- parameterType封装：对象，对象属性与SQL语句参数进行自动匹配（若对象属性与表列名不一致则用别名或者resultMap） -->
	<select id="selectLogin_2" parameterType="User" resultType="User">
		select * from user where username=#{userName} and password=#{password}
	</select>
	
	<!-- 查询多条记录，返回List<resultType> -->
	<select id="selectUser" resultType="User">
		select * from user
	</select>
	
	<!-- resultType与resultMap只能使用一个，resultMap可以解决复杂查询时的映射问题，如类属性与表列名不一致，类属性为复杂对象等 -->
	<!-- resultMap可以看作是加入具体映射配置的resultType，从而可以在如上的复杂情景使用，而resultType使用的是默认名称映射配置，适合简单情景使用 -->
	<!-- 自己观点：Hibernate是类/对象驱动数据操作，即通过使用HQL对对象进行操作进而通过orm更新到数据库。而MyBatis是SQL驱动数据操作，利用SQL语句直接操作
		  数据库，如果存在返回结果，则将结果映射到resultType和resultMap对应的类型进行封装，映射过程为SQL语句中字段/别名按照配置或者名称映射到对象属性 -->
	<resultMap id="userMap" type="User">
		<id property="id" column="id" />
		<result property="userName" column="username" />
		<result property="password" column="password" />
		<result property="gender" column="gender" />
	</resultMap>
	<!-- 查询多条记录，返回List<resultMap.type> -->
	<select id="selectUserByMap" resultMap="userMap">
		select id, username, password from user
	</select>
	
	<resultMap id="userBookMap" type="User">
		<id property="id" column="id" />
		<result property="userName" column="username" />
		<result property="password" column="password" />
		<result property="gender" column="gender" />
		<!-- 集合查询 -->
		<!-- collection：集合类型的关联	ofType：集合的泛型	（集合类型在数据库中无字段对应）-->
		<collection property="bookList" javaType="ArrayList" ofType="Book">
			<!-- MyBatis 多表联合查询，两张表中字段重复时，在配置文件中，
				 sql语句联合查询时使用字段别名，resultMap中对应的column属性使用相应的别名 -->
			<id property="id" column="bid" />
			<result property="bookName" column="bookname" />
			<result property="price" column="price" />
		</collection>
		<!-- 鉴别器：根据表中某个字段区别数据，将查询出的数据自动封装成不同类型的对象，包括类的继承层次结构 -->
		<!-- discriminator：鉴别器	column：鉴别字段	case：鉴别处理情况(分为resultMap与resultType) -->
		<discriminator javaType="Integer" column="gender">
			<case value="1" resultMap="maleUserMap" />
			<case value="0" resultMap="femaleUserMap" />
		</discriminator>
	</resultMap>
	<!-- extends：父resultMap（如果有继承则必须要写，否则将得不到父类的公共属性映射） -->
	<resultMap id="maleUserMap" type="com.cqu.bean.MaleUser" extends="userBookMap">
		<result property="wifeName" column="wifename" />
	</resultMap>
	<resultMap id="femaleUserMap" type="com.cqu.bean.FemaleUser" extends="userBookMap">
		<result property="husbandName" column="husbandName" />
	</resultMap>
	<!-- 多表联合查询字段重复时，需要使用字段别名来避免在后面的冲突字段数据缺失，即：book.id bid -->
	<select id="selectUserWithColl" resultMap="userBookMap">
		select user.*, book.id bid, book.bookName, book.price from user inner join book on user.id=book.userID
	</select>
	<!-- 将该查询语句的resultMap值改为maleUserMap，从user表查询得到的数据都将强制转换为MaleUser类型，不符合多态思想 -->
	<select id="selectUserByDis" resultMap="userBookMap">
		select * from user where id=#{id}
	</select>
</mapper>
